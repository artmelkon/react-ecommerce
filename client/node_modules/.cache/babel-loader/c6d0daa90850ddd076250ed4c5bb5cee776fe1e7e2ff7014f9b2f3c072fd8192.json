{"ast":null,"code":"var _jsxFileName = \"/Users/arthurmelkonyan/webdev/react-ecommerce/client/src/components/auth/sign-up.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\n// import { useState, useCallback } from 'react';\n// import { withRouter } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\n// import { createUserWithEmailAndPassword } from 'firebase/auth';\n// import axiox from 'axios';\n// import swr from 'swr';\n\n// import { auth } from '../../firebase/config.ts';\nimport Layout from '../shared/layout';\nimport './sign-up.styles.scss';\n\n// const initialValues = {\n//   firstname: 'art',\n//   email: 'test@email.com',\n//   password: '123456'\n// }\n\n// // SWr fetcher\n// const fetcher = (...args) => fetch(...args).then(res => res.json())\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignUp = ({\n  history\n}) => {\n  _s();\n  // const [values, setValues] = useState(initialValues);\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n  // const { register, handleSubmit, formState: { errors, isSubmitting, isDirty, isValid } } = useForm();\n  // console.log('React app origin:', window.location.origin);\n\n  // const onSubmit = async (data) => {\n  //   try {\n  //     console.log('form data: ', data)\n  //     const serverUri = process.env.REACT_APP_SERVER_URI;\n  //     console.log('server uri: ', serverUri);\n\n  //     // Remove credentials temporarily\n  //     // const result = await fetch(`https://api.restful-api.dev/objects`);\n\n  //     const result = await fetch(`http://localhost:4000/api/signup`, {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify(initialValues),\n  //       credentials: 'include'\n  //     })\n\n  //     console.log('result: ', result);\n  //     console.log('result.status: ', result.status);\n  //     console.log('result.ok: ', result.ok);\n\n  //     if (!result.ok) throw new Error(`HTTP ${result.status}`);\n  //     const message = await result.json();\n  //     console.log('return user: ', message);\n\n  //     // history.push('/');\n  //   } catch (error) {\n  //     console.error('=== ERROR CAUGHT ===');\n  //     console.error('Full error:', error);\n  //   }\n  // };\n  // const onSubmit = useCallback(async (data) => {\n  //   try {\n  //     const serverUri = process.env.REACT_APP_SERVER_URI;\n  //     console.log('server uri: ', serverUri)\n  //     const result = await fetch(`${serverUri}/api/signup`, {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify(data),\n  //       credentials: 'include'\n  //     })\n  //     console.log('result: ', result)\n  //     if (!result.ok) throw new Error('Something went wrong');\n  //     const message = await result.json();\n  //     console.log('return user: ', message)\n\n  //     // const firebaseResult = await createUserWithEmailAndPassword(auth, data.email, data.password);\n  //     // console.log('firebase result: ', firebaseResult)\n\n  //     history.push('/')\n\n  //   } catch (error) {\n  //     console.error('=== ERROR CAUGHT ===');\n  //     console.error('Error type:', typeof error);\n  //     console.error('Error name:', error?.name);\n  //     console.error('Error message:', error?.message);\n  //     console.error('Full error:', error);\n  //   }\n\n  // }, [history])\n\n  const onSubmit = async data => {\n    console.log('=== FORM SUBMISSION STARTED ===');\n    console.log('Form data:', data);\n    console.log('Server URI:', process.env.REACT_APP_SERVER_URI);\n    try {\n      const url = `${process.env.REACT_APP_SERVER_URI}/api/signup`;\n      console.log('Full URL:', url);\n      console.log('About to fetch...');\n\n      // Add a timeout to prevent infinite hanging\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => {\n        console.log('FETCH TIMEOUT - Aborting request');\n        controller.abort();\n      }, 5000); // 5 second timeout\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      console.log('Fetch completed!');\n      console.log('Response:', response);\n      console.log('Status:', response.status);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log('Success:', result);\n    } catch (error) {\n      console.error('=== FETCH ERROR ===');\n      console.error('Error name:', error.name);\n      console.error('Error message:', error.message);\n      console.error('Full error:', error);\n      if (error.name === 'AbortError') {\n        console.error('Request timed out - server not responding');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sign-up\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              autoComplete: \"off\",\n              ...register('firstname', {\n                required: 'The field cannot be empty!',\n                maxLength: {\n                  value: 80,\n                  message: 'First name is too long! Only 80 characters are alowed'\n                }\n                // onChange: (e) => setValues({ ...values, firstname: e.target.value }),\n              }),\n              // value={values.firsname}\n              placeholder: \"First Name\",\n              className: `nomad-input ${errors.firstname ? 'error' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              ...register('email', {\n                required: 'Email cannot be emplty!'\n                // onChange: (e) => setValues({ ...values, email: e.target.value })\n              }),\n              // value={values.email}\n              placeholder: \"Email\",\n              className: `nomad-input ${errors.email ? 'email' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              ...register('password', {\n                required: 'Password cannot be empty!',\n                minLength: {\n                  values: 2,\n                  message: 'Password should be at least 2 character or more'\n                }\n              }),\n              placeholder: \"Password\",\n              className: `nomad-input ${errors.password ? 'password' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"submit-btn\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button is-black nomad-btn submit\",\n              children: \"SIGN UP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(SignUp, \"cSudtlZF25wA1QXS6hk7TRnoNuU=\", false, function () {\n  return [useForm];\n});\n_c = SignUp;\nexport default SignUp;\n// export default withRouter(SignUp)\nvar _c;\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"names":["React","useForm","Layout","jsxDEV","_jsxDEV","SignUp","history","_s","register","handleSubmit","formState","errors","onSubmit","data","console","log","process","env","REACT_APP_SERVER_URI","url","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","status","ok","Error","result","json","error","name","message","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","autoComplete","required","maxLength","value","placeholder","firstname","email","minLength","values","password","_c","$RefreshReg$"],"sources":["/Users/arthurmelkonyan/webdev/react-ecommerce/client/src/components/auth/sign-up.jsx"],"sourcesContent":["import React from 'react';\n// import { useState, useCallback } from 'react';\n// import { withRouter } from 'react-router-dom';\nimport { useForm, } from 'react-hook-form';\n// import { createUserWithEmailAndPassword } from 'firebase/auth';\n// import axiox from 'axios';\n// import swr from 'swr';\n\n// import { auth } from '../../firebase/config.ts';\nimport Layout from '../shared/layout';\nimport './sign-up.styles.scss';\n\n// const initialValues = {\n//   firstname: 'art',\n//   email: 'test@email.com',\n//   password: '123456'\n// }\n\n// // SWr fetcher\n// const fetcher = (...args) => fetch(...args).then(res => res.json())\n\nconst SignUp = ({ history }) => {\n  // const [values, setValues] = useState(initialValues);\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  // const { register, handleSubmit, formState: { errors, isSubmitting, isDirty, isValid } } = useForm();\n  // console.log('React app origin:', window.location.origin);\n\n  // const onSubmit = async (data) => {\n  //   try {\n  //     console.log('form data: ', data)\n  //     const serverUri = process.env.REACT_APP_SERVER_URI;\n  //     console.log('server uri: ', serverUri);\n\n  //     // Remove credentials temporarily\n  //     // const result = await fetch(`https://api.restful-api.dev/objects`);\n\n  //     const result = await fetch(`http://localhost:4000/api/signup`, {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify(initialValues),\n  //       credentials: 'include'\n  //     })\n\n  //     console.log('result: ', result);\n  //     console.log('result.status: ', result.status);\n  //     console.log('result.ok: ', result.ok);\n\n  //     if (!result.ok) throw new Error(`HTTP ${result.status}`);\n  //     const message = await result.json();\n  //     console.log('return user: ', message);\n\n  //     // history.push('/');\n  //   } catch (error) {\n  //     console.error('=== ERROR CAUGHT ===');\n  //     console.error('Full error:', error);\n  //   }\n  // };\n  // const onSubmit = useCallback(async (data) => {\n  //   try {\n  //     const serverUri = process.env.REACT_APP_SERVER_URI;\n  //     console.log('server uri: ', serverUri)\n  //     const result = await fetch(`${serverUri}/api/signup`, {\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify(data),\n  //       credentials: 'include'\n  //     })\n  //     console.log('result: ', result)\n  //     if (!result.ok) throw new Error('Something went wrong');\n  //     const message = await result.json();\n  //     console.log('return user: ', message)\n\n  //     // const firebaseResult = await createUserWithEmailAndPassword(auth, data.email, data.password);\n  //     // console.log('firebase result: ', firebaseResult)\n\n\n  //     history.push('/')\n\n  //   } catch (error) {\n  //     console.error('=== ERROR CAUGHT ===');\n  //     console.error('Error type:', typeof error);\n  //     console.error('Error name:', error?.name);\n  //     console.error('Error message:', error?.message);\n  //     console.error('Full error:', error);\n  //   }\n\n  // }, [history])\n\n\n  const onSubmit = async (data) => {\n    console.log('=== FORM SUBMISSION STARTED ===');\n    console.log('Form data:', data);\n    console.log('Server URI:', process.env.REACT_APP_SERVER_URI);\n\n    try {\n      const url = `${process.env.REACT_APP_SERVER_URI}/api/signup`;\n      console.log('Full URL:', url);\n\n      console.log('About to fetch...');\n\n      // Add a timeout to prevent infinite hanging\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => {\n        console.log('FETCH TIMEOUT - Aborting request');\n        controller.abort();\n      }, 5000); // 5 second timeout\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n      console.log('Fetch completed!');\n      console.log('Response:', response);\n      console.log('Status:', response.status);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      console.log('Success:', result);\n\n    } catch (error) {\n      console.error('=== FETCH ERROR ===');\n      console.error('Error name:', error.name);\n      console.error('Error message:', error.message);\n      console.error('Full error:', error);\n\n      if (error.name === 'AbortError') {\n        console.error('Request timed out - server not responding');\n      }\n    }\n  };\n\n\n  return (\n    <Layout>\n      <div className='sign-up'>\n        <h1>Sign Up</h1>\n        <div className='form-container'>\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div>\n              <input\n                type='text'\n                autoComplete='off'\n                {...register('firstname', {\n                  required: 'The field cannot be empty!',\n                  maxLength: {\n                    value: 80,\n                    message: 'First name is too long! Only 80 characters are alowed'\n                  },\n                  // onChange: (e) => setValues({ ...values, firstname: e.target.value }),\n                })}\n                // value={values.firsname}\n                placeholder='First Name'\n                className={`nomad-input ${errors.firstname ? 'error' : ''}`}\n              />\n            </div>\n            <div>\n              <input\n                type=\"email\"\n                {...register('email', {\n                  required: 'Email cannot be emplty!',\n                  // onChange: (e) => setValues({ ...values, email: e.target.value })\n                })}\n                // value={values.email}\n                placeholder='Email'\n                className={`nomad-input ${errors.email ? 'email' : ''}`}\n              />\n            </div>\n            <div>\n              <input\n                type=\"password\"\n                {...register('password', {\n                  required: 'Password cannot be empty!',\n                  minLength: {\n                    values: 2,\n                    message: 'Password should be at least 2 character or more'\n                  }\n                })}\n                placeholder='Password'\n                className={`nomad-input ${errors.password ? 'password' : ''}`}\n              />\n            </div>\n            <div className='submit-btn'>\n              <button className='button is-black nomad-btn submit'\n              >SIGN UP</button>\n              {/* <button\n                disabled={!isDirty || !isValid || isSubmitting}\n                className='button is-black nomad-btn submit'\n              >SIGN UP</button> */}\n            </div>\n            {/* <div>\n              {\n                errors.firstname && <p>{errors.message}</p>\n              }\n              {\n                errors.email && <p>{errors.message}</p>\n              }\n              {\n                errors.firstname && <p>{errors.message}</p>\n              }\n            </div> */}\n          </form>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default SignUp\n// export default withRouter(SignUp)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}